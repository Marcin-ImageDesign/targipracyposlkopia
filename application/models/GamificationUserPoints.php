<?php

/**
 * GamificationUserPoints.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     ##NAME## <##EMAIL##>
 *
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class GamificationUserPoints extends Table_GamificationUserPoints
{
    public static function calculateDayRanking($id_event)
    {
        // połączenie
        $conn = Doctrine_Manager::connection();

        // kasowanie całego dziennego rankingu dotyczącego aktualnego wydarzenia
        $conn->prepare('DELETE FROM gamification_day_ranking WHERE  id_event=' . $id_event)->execute();

        // obliczanie na nowo dziennego rankingu użytkowników
        $query = '
        INSERT INTO gamification_day_ranking
        SELECT up.id_user, up.id_event, SUM( up.action_points ) AS points
        FROM (
            SELECT  s.id_user AS id_user,
            s.id_event AS id_event,
            gap.action AS ACTION,
            COUNT(*),
            gap.point AS action_points
        FROM statistics s, gamification_action_point gap
            WHERE s.channel = gap.action
            AND s.id_event = ' . $id_event . "
            AND s.created_at > '" . date('Y-m-d') . " 00:00:00'
            AND s.created_at < '" . date('Y-m-d') . " 23:59:59'
            GROUP BY DAY(s.created_at), gap.action, s.id_user, s.id_element, s.id_element_item
            ORDER BY s.id_user
        ) AS up
        LEFT JOIN exhib_participation ep ON ep.id_user = up.id_user
        WHERE ep.id_exhib_participation_type = 5 AND ep.id_event = " . $id_event . '
        GROUP BY up.id_user
        ORDER BY points DESC;
        ';

        return $conn->prepare($query)->execute();
    }

    public static function convertUsersPoints($id_event)
    {
        // połączenie
        $conn = Doctrine_Manager::connection();

        // kasowanie całego rankingu dotyczącego aktualnego wydarzenia
        $conn->prepare('DELETE FROM gamification_user_points WHERE  id_event=' . $id_event)->execute();

        // obliczanie na nowo rankingu użytkowników
        $query = '
        INSERT INTO gamification_user_points
        SELECT up.id_user, up.id_event, SUM( up.action_points ) AS points
        FROM (
            SELECT  s.id_user AS id_user,
            s.id_event AS id_event,
            gap.action AS ACTION,
            COUNT(*),
            gap.point AS action_points
        FROM statistics s, gamification_action_point gap
            WHERE s.channel = gap.action
            AND s.id_event = ' . $id_event . '
            GROUP BY DAY(s.created_at), gap.action, s.id_user, s.id_element, s.id_element_item
            ORDER BY s.id_user
        ) AS up
        LEFT JOIN exhib_participation ep ON ep.id_user = up.id_user
        WHERE ep.id_exhib_participation_type = 5 AND ep.id_event = ' . $id_event . '
        GROUP BY up.id_user
        ORDER BY points DESC;
        ';

        return $conn->prepare($query)->execute();
    }

    public static function getUserPoints($id_event, $id_user, $date_from = null, $date_to = null)
    {
        // połączenie
        $conn = Doctrine_Manager::getInstance()->connection();

        if ($date_from) {
            $date_from = ' AND s.created_at > "' . $date_from . '"';
        }

        if ($date_to) {
            $date_to = ' AND s.created_at < "' . $date_to . '"';
        }

        // obliczanie na nowo rankingu użytkowników
        $query = '
        SELECT s.id_user, s.id_event, s.created_at, gap.action, s.id_element, s.id_element_item, gap.description, gap.point
        FROM statistics s, gamification_action_point gap
        WHERE s.channel = gap.action
        AND s.id_event =  ' . $id_event . '
        AND s.id_user = ' . $id_user .
        $date_from .
        $date_to .
        ' GROUP BY DAY(s.created_at), gap.action, s.id_user, s.id_element, s.id_element_item
        ORDER BY s.created_at ASC;
        ';
        $pointsList = $conn->prepare($query);
        $pointsList->execute();

        return $pointsList->fetchAll();
    }

    public static function getUserRank($id_event, $id_user)
    {
        // połączenie
        $conn = Doctrine_Manager::connection();

        $query = '
        SELECT rank, id_user, id_event, points
        FROM
        (
            SELECT id_event, gup.id_user, points, @rownum := @rownum + 1 AS rank
            FROM gamification_user_points gup, (SELECT @rownum := 0) r, user u
            WHERE gup.id_event = ' . $id_event . '
            and u.id_user = gup.id_user
            and u.is_banned = 0
            ORDER BY points DESC
        ) selection
        WHERE selection.id_user=' . $id_user . '
        ';

        $pointsList = $conn->prepare($query);
        $pointsList->execute();

        return $pointsList->fetch();
    }

    public static function getUserCountUp($id_event, $points)
    {
        // połączenie
        $conn = Doctrine_Manager::connection();

        $query = '
        SELECT gup.points
        FROM gamification_user_points gup
        WHERE gup.id_event =  ' . $id_event . '
        AND gup.points > ' . $points . '
        ORDER BY points ASC
        LIMIT 1
        ';

        $pointsList = $conn->prepare($query);
        $pointsList->execute();
        $pointsUp = $pointsList->fetch();
        $pointsUp = $pointsUp['points'];

        return $pointsUp - $points + 1;
    }

    public static function getUserPointsToday($id_event, $id_user)
    {
        // połączenie
        $conn = Doctrine_Manager::getInstance()->connection();

        $query = '
        SELECT up.id_user, up.id_event, SUM( up.action_points ) AS points
        FROM (
            SELECT  s.id_user AS id_user,
            s.id_event AS id_event,
            gap.action AS ACTION,
            COUNT(*),
            gap.point AS action_points
        FROM statistics s, gamification_action_point gap
            WHERE s.channel = gap.action
            AND s.id_event = ' . $id_event . '
            AND s.id_user = ' . $id_user . "

            AND s.created_at > '2014-08-11 00:00:00'
            AND s.created_at < '2014-08-11 " . date('H') . "00:00'

            GROUP BY gap.action, s.id_user, s.id_element, s.id_element_item
            ORDER BY s.id_user
        ) AS up
        LEFT JOIN exhib_participation ep ON ep.id_user = up.id_user
        WHERE ep.id_exhib_participation_type = 5
            AND ep.id_event = " . $id_event . '
            AND ep.id_user = ' . $id_user . '
        GROUP BY up.id_user
        ORDER BY points DESC;
        ';

        $pointsQuery = $conn->prepare($query);
        $pointsQuery->execute();
        $points = $pointsQuery->fetch();

        return $points['points'];
    }
}

<?php

/**
 * ExhibStandViewImage.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     ##NAME## <##EMAIL##>
 *
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ExhibStandViewImage extends Table_ExhibStandViewImage
{
    const DIRECTORY_STAND_VIEW_IMAGE = '_db/exhib_stand_view_image';

    private $_data_icon;
    private $_data_banner;
    private $_data_stand;

//    public static function getFlashButtonsData(){
//        return array(
//        'flash_url_files_x' => array('value' => 620,'name' => 'Flash button file - x' ),
//        'flash_url_files_y' => array('value' => 315,'name' => 'Flash button file - y' ),
//        'flash_url_phone_x' => array('value' => 220,'name' => 'Flash button phone - x' ),
//        'flash_url_phone_y' => array('value' => 325,'name' => 'Flash button phone - y' ),
//        'flash_url_mail_x' => array('value' => 395,'name' => 'Flash button mail - x' ),
//        'flash_url_mail_y' => array('value' => 360,'name' => 'Flash button mail - y' ),
//        'flash_url_agenda_x' => array('value' => 585,'name' => 'Flash button agenda - x' ),
//        'flash_url_agenda_y' => array('value' => 180,'name' => 'Flash button agenda - y' ),
//        'flash_url_chat_x' => array('value' => 689,'name' => 'Flash button chat - x' ),
//        'flash_url_chat_y' => array('value' => 258,'name' => 'Flash button chat - y' ),
//        );
//    }

    public function getId()
    {
        return $this->id_exhib_stand_view_image;
    }

    public function getHash()
    {
        return $this->hash;
    }

    public function getName()
    {
        return $this->name;
    }

    public function getStandViewImageName()
    {
        return $this->hash . '.' . $this->file_ext;
    }

    public function getStandImageViewThumbFileName()
    {
        return 'thumb_' . $this->hash . '.' . $this->file_ext;
    }

    public function deleteStandViewImage()
    {
        if ($this->standViewImageExists()) {
            unlink($this->getRelativeStandViewImage(false));
        }
        $this->file_ext = '';
    }

    public function getRelativeStandViewImage($createDir = true)
    {
        return $this->getRelativePath($createDir) . '/' . $this->getStandViewImageName();
    }

    public function getRelativePath($createDir = true)
    {
        $relativePath = $this->BaseUser->getPublicRelativePath($createDir);
        if ($createDir) {
            $utils = Engine_Utils::getInstance();
            $relativePath = $utils->createDirWithPath($relativePath, self::DIRECTORY_STAND_VIEW_IMAGE, '/');
        } else {
            $relativePath = $relativePath . '/' . self::DIRECTORY_STAND_VIEW_IMAGE;
        }

        return $relativePath;
    }

    public function setName($value)
    {
        return $this->name = $value;
    }

    public function setStandViewImageExt($ext)
    {
        $this->file_ext = $ext;
    }

    public function getHostessPositionX()
    {
        return $this->stand_hostess_pos_x ? $this->stand_hostess_pos_x : 0;
    }

    public function getHostessPositionY()
    {
        return $this->stand_hostess_pos_y ? $this->stand_hostess_pos_y : 0;
    }

    public function setDataIcon($value)
    {
        $this->_data_icon = (array) $value;
        $this->data_icon = json_encode($value);

        return $this;
    }

    public function getDataIcon()
    {
        if (null === $this->_data_icon) {
            $this->_data_icon = (array) @json_decode($this->data_icon, true);
        }

        return $this->_data_icon;
    }

    public function setDataBanner($value)
    {
        $this->_data_banner = (array) $value;
        $this->data_banner = json_encode($value);

        return $this;
    }

    public function getDataBanner()
    {
        if (null === $this->_data_banner) {
            $this->_data_banner = (array) @json_decode($this->data_banner, true);
        }

        return $this->_data_banner;
    }

    public function setDataStand($value)
    {
        $this->_data_stand = (array) $value;
        $this->data_stand = json_encode($value);

        return $this;
    }

    public function getDataStand()
    {
        if (null === $this->_data_stand) {
            $this->_data_stand = (array) @json_decode($this->data_stand, true);
        }

        return $this->_data_stand;
    }

    public static function getPublicPathStandImageView(BaseUser $BaseUser)
    {
        return $BaseUser->getPublicBrowserPath() . '/' . self::DIRECTORY_STAND_VIEW_IMAGE . '/';
    }

    public function getBrowseStandImageView()
    {
        return $this->BaseUser->getPublicBrowserPath() . '/' . self::DIRECTORY_STAND_VIEW_IMAGE . '/' . $this->getStandViewImageName();
    }

    public function getBrowseStandThumbImageView()
    {
        return $this->BaseUser->getPublicBrowserPath() . '/' . self::DIRECTORY_STAND_VIEW_IMAGE . '/' . $this->getStandImageViewThumbFileName();
    }

    /**
     * @param $id
     *
     * @return ExhibStandViewImage|false
     */
    public static function find($id, $id_language = null, $tableName = null)
    {
        return Doctrine::getTable(__CLASS__)->find($id);
    }

    /**
     * @param $hash
     *
     * @return ExhibStandViewImage
     */
    public static function findOneByHash($hash)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibStandViewImage svi')
            ->where('svi.hash = ?', [$hash])
        ;

        return $query->execute()->getFirst();
    }

    public static function findOwnerStandView($id_exhib_stand)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibStandViewImage svi')
            ->where('svi.is_active = 1 AND svi.id_exhib_stand = ?', [$id_exhib_stand])
        ;

        return $query->execute()->getFirst();
    }

    //metoda sprawdzajaca dostep do widoku stoiska
    public function hasAccess(User $User)
    {
        if (!empty($this->id_user_created)) {
            if ($this->id_user_created == $User->id_user) {
                return true;
            }

            return false;
        }

        return true;
    }

    private function standViewImageExists()
    {
        if (!empty($this->file_ext) && file_exists($this->getRelativeStandViewImage(false))) {
            return true;
        }

        return false;
    }
}

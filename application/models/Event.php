<?php

/**
 * Event.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     ##NAME## <##EMAIL##>
 *
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Event extends Table_Event implements Engine_Doctrine_Record_IdentifiableInterface
{
    private $_dataSponsors;
    private $_dataPatrons;
    private $_dataBannerGroups;

    public function getId()
    {
        return $this->id_event;
    }

    public function isConfirmSendEmailToExhibitor()
    {
        $isConfirm = true;
        if ('' !== $this->getEmailForOrder()) {
            $isConfirm = false;
        }

        return $isConfirm;
    }

    /**
     * @return string
     */
    public function getHash()
    {
        return $this->hash;
    }

    public function getReplaceText()
    {
        return $this->replace_text;
    }

    public function isChatSchedule()
    {
        return $this->is_chat_schedule;
    }

    public function isNew()
    {
        return null === $this->getId();
    }

    public function getTitle()
    {
        return $this->getField('title');
    }

    public function setTitle($value)
    {
        $this->setField('title', $value);
    }

    public function getBgColor()
    {
        return $this->bg_color;
    }

    public function getLead()
    {
        return $this->getField('lead');
    }

    public function setLead($value)
    {
        $this->setField('lead', $value);
    }

    public function getHomePageUrl()
    {
        return $this->home_page_url;
    }

    public function setHomePageUrl($value)
    {
        $this->home_page_url = $value;
    }

    public function setBgColor($value)
    {
        $this->bg_color = $value;
    }

    public function getDescription()
    {
        return $this->getField('description');
    }

    public function setDescription($value)
    {
        $this->setField('description', $value);
    }

    public function getRules()
    {
        return $this->getField('rules');
    }

    public function setRules($value)
    {
        $this->setField('rules', $value);
    }

    public function getUri()
    {
        return $this->getField('uri');
    }

    public function setUri($value)
    {
        return $this->setField('uri', $value);
    }

    public function getDateStart()
    {
        return $this->date_start;
    }

    public function setDateStart($value)
    {
        if (!mb_stristr($value, ':')) {
            $this->date_start = $value . ' 00:00:00';
        } else {
            $this->date_start = $value;
        }
    }

    public function getDateEndFormat($format = 'Y-m-d')
    {
        return date($format, strtotime($this->date_end));
    }

    public function getDateStartFormat($format = 'Y-m-d')
    {
        return date($format, strtotime($this->date_start));
    }

    public function getDateStartNice($format = null)
    {
        $format = ($format) ? $format : Zend_Date::DAY_SHORT . ' ' . Zend_Date::MONTH_NAME;
        $date = new Zend_Date();

        return $date->set($this->getDateStart())->toString($format);
    }

    public function getDateStartNicePHP($format = null)
    {
        $oenc = iconv_get_encoding('internal_encoding');
        $format = ($format) ? $format : '%G-%m-%d';
        $niceDate = strftime($format, strtotime($this->getDateStart()));
        if (!in_array($oenc, ['UTF-8', 'UTF8'], true)) {
            $niceDate = iconv('iso-8859-2', 'UTF-8', $niceDate);
        }

        return $niceDate;
    }

    public function getDateEnd()
    {
        return $this->date_end;
    }

    public function getClearDateStart()
    {
        $newDate = strtotime($this->date_start);

        return date('Y-m-d', $newDate);
    }

    public function getClearDateEnd()
    {
        $newDate = strtotime($this->date_end);

        return date('Y-m-d', $newDate);
    }

    public function setDateEnd($value)
    {
        if (!mb_stristr($value, ':')) {
            $this->date_end = $value . ' 23:59:59';
        } else {
            $this->date_end = $value;
        }
    }

    public function hasHomePageUrl()
    {
        $home_page_url = $this->getHomePageUrl();

        return empty($home_page_url) ? false : true;
    }

    public function setIsActive($value)
    {
        return $this->is_active = $value;
    }

    public function getIsActive()
    {
        return $this->is_active;
    }

    public function setIsArchive($value)
    {
        return $this->is_archive = $value;
    }

    public function getIsArchive()
    {
        return $this->is_archive;
    }

    public function setIsScheduled($value)
    {
        return $this->is_scheduled = $value;
    }

    public function getIsScheduled()
    {
        return $this->is_scheduled;
    }

    public function setMapSponsors($value)
    {
        $this->map_sponsors = json_encode($value);
        $dataTranslation = [];

        foreach ($value as $k => $v) {
            $dataTranslation[$k]['name'] = $v['name'];
        }

        $this->getTranslation()->map_sponsors = json_encode($dataTranslation);

        return $this;
    }

    public function setMapPatrons($value)
    {
        $this->map_patrons = json_encode($value);

        return $this;
    }

    public function getMapSponsors()
    {
        $this->_dataSponsors = (array) @json_decode($this->map_sponsors, true);
        $names = $this->getTranslation()->getMapSponsors();

        $sponsorsMerged = [];

        if (!empty($this->_dataSponsors) && !empty($names)) {
            foreach ($this->_dataSponsors as $key => $sponsor) {
                if(isset($names[$key])) {
                    $sponsorsMerged[$key] = array_merge($names[$key], $sponsor);
                }
            }
        }

        return $sponsorsMerged;
    }

    public function getMapPatrons()
    {
        $this->_dataPatrons = (array) @json_decode($this->map_patrons, true);

        return $this->_dataPatrons;
    }

    public function getDataBannerGroups()
    {
        $this->_dataBannerGroups = (array) @json_decode($this->data_banner_group, true);

        return $this->_dataBannerGroups;
    }

    public function getBannersByGroup($groupName)
    {
        $allBanners = $this->getDataBannerGroups();
        $bannerGroup = [];
        if (isset($allBanners[$groupName])) {
            $bannerGroup = $allBanners[$groupName];
        }

        // stały klucz tablicy asocjacyjnej z ID zdjęcia
        foreach ($bannerGroup as $k => $v) {
            $bannerGroup[$k]['img'] = $bannerGroup[$k]['image' . $k];
        }

        return $bannerGroup;
    }

    public function setDataBannerGroups($value)
    {
        $this->data_banner_group = json_encode($value);

        return $this;
    }

    public function getMapSponsorsRaw()
    {
        return $this->map_sponsors;
    }

    public function getMapPatronsRaw()
    {
        return $this->map_patrons;
    }

    public function setMapSponsorsRaw($data)
    {
        $this->map_sponsors = $data;
    }

    public function setMapPatronsRaw($data)
    {
        $this->map_patrons = $data;
    }

    public function getImageLight()
    {
        return $this->id_image_light;
    }

    public function getDirectory()
    {
        return $this->directory;
    }

    public function setDirectory($value)
    {
        $this->directory = $value;
    }

    public function getField($field)
    {
        return $this->getTranslation()->{$field};
    }

    public function setField($field, $value)
    {
        $this->getTranslation()->{$field} = $value;
    }

    /**
     * @param null|int $id_language
     *
     * @return EventTranslation
     */
    public function getTranslation($id_language = null)
    {
        $id_language = null === $id_language ? Engine_I18n::getLangId() : $id_language;
        if (!isset($this->Translations[$id_language])) {
            $translation = EventTranslation::find($this->getId(), $id_language);
            if ($translation) {
                $this->Translations[$id_language] = $translation;
            }
        }

        return $this->Translations[$id_language];
    }

    public function setStyle($value)
    {
        return $this->style = $value;
    }

    public function getStyle()
    {
        return $this->style;
    }

    /**
     * @return bool
     */
    public function translationExists()
    {
        $title = $this->getTitle();

        return empty($title) ? false : true;
    }

    /**
     * @param int        $id_event
     * @param int        $id_language
     * @param null|mixed $tableName
     *
     * @return Event|false
     */
    public static function find($id_event, $id_language = null, $tableName = null)
    {
        $id_language = null === $id_language ? Engine_I18n::getLangId() : $id_language;

        return Doctrine_Query::create()
            ->from('Event e')
            ->leftJoin('e.Translations t WITH t.id_language = ?', $id_language)
            ->where('e.id_event = ?', $id_event)
            ->limit(1)
            ->execute()
            ->getFirst()
        ;
    }

    /**
     * @param string $hash
     * @param int    $id_language
     *
     * @return Event|false
     */
    public static function findOneByHash($hash, $id_language = null)
    {
        $id_language = null === $id_language ? Engine_I18n::getLangId() : $id_language;

        return Doctrine_Query::create()
            ->from('Event e')
            ->leftJoin('e.Translations t WITH t.id_language = ?', $id_language)
            ->where('e.hash = ?', $hash)
            ->limit(1)
            ->execute()
            ->getFirst()
        ;
    }

    /**
     * @param uri        $uri
     * @param int        $language
     * @param null|mixed $id_language
     *
     * @return Event
     */
    public static function findOneByUri($uri, $id_language = null)
    {
        $id_language = null === $id_language ? Engine_I18n::getLangId() : $id_language;

        return Doctrine_Query::create()
            ->from('Event e')
            ->leftJoin('e.Translations t WITH t.id_language = ?', $id_language)
            ->where('t.uri = ?', $uri)
            ->limit(1)
            ->execute()
            ->getFirst()
        ;
    }

    /**
     * @param int $id_language
     *
     * @return Doctrine_Collection
     */
    public static function findPlanned($id_language = null)
    {
        $id_language = null === $id_language ? Engine_I18n::getLangId() : $id_language;

        return Doctrine_Query::create()
            ->from('Event e')
            ->leftJoin('e.Translations t WITH t.id_language = ?', $id_language)
            ->addWhere('e.is_active = ?', 1)
            ->addWhere('e.date_start > ?', date('Y-m-d'))
            ->orderBy('e.date_start asc')
            ->execute()
        ;
    }

    /**
     * @param int $id_language
     *
     * @return Doctrine_Collection
     */
    public static function findEnded($id_language = null)
    {
        $id_language = null === $id_language ? Engine_I18n::getLangId() : $id_language;

        return Doctrine_Query::create()
            ->from('Event e')
            ->leftJoin('e.Translations t WITH t.id_language = ?', $id_language)
            ->where('e.date_end < ?', date('Y-m-d'))
            ->orderBy('e.date_end desc')
            ->execute()
        ;
    }

    public function hasExhibitors()
    {
        $result = Doctrine_Query::create()
            ->from('ExhibStand es')
            ->where(
                'es.is_active = 1 AND es.id_base_user = ? AND es.id_event = ?',
                [$this->BaseUser->getId(), $this->getId()]
            )
            ->execute()
        ;

        return (bool) count($result);
    }

    /**
     * @param $language Language
     *
     * @return HomePage
     */
    public function getHomePage($language)
    {
        $homePage = null;
        if (!empty($this->id_home_page)) {
            $homePage = HomePage::find($this->id_home_page, $language);
        }

        if (empty($homePage)) {
            $homePage = new HomePage();
            $homePage->hash = Engine_Utils::_()->getHash();
            $homePage->Version = new HomePageVersion();
            $homePage->Version->Language = $language;
            $homePage->setPageData(['box' => [], 'sponsors' => []]);
            $homePage->Event = $this;
            $homePage->save();

            $this->id_home_page = $homePage->getId();
            $this->save();
        }

        return $homePage;
    }

    public function hasAccess(User $User)
    {
        //jesli organizator targów
        if (UserRole::ROLE_ORGANIZER == $User->UserRole->getId()) {
            $exhib_participation = ExhibParticipation::findParticipationByUserId($User->getId(), $this->BaseUser->getId(), $this->getId(), ExhibParticipationType::TYPE_ORGANIZER);

            $exhib_participation_count = !empty($exhib_participation) ? $exhib_participation->count() : 0;
            if ($exhib_participation_count > 0) {
                return true;
            }
        }

        return false;
    }

    public function getAbsoluteDirectory()
    {
        return APPLICATION_PRIVATE . DS . 'event' . DS . $this->getDirectory();
    }

    public function getBrowserDirectory()
    {
        return '/private/event/' . $this->getDirectory();
    }

    public function hasDirectory()
    {
        $directory = $this->getDirectory();

        return !empty($directory);
    }
}

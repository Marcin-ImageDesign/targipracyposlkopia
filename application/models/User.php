<?php

/**
 * User.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     ##NAME## <##EMAIL##>
 *
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class User extends Table_User
{
    const DIRECTORY = 'user';

    const DIRECTORY_PUBLIC = '_db/user/file';

    public static $companySizeOptions = [
        0 => ' ',
        1 => '1-10',
        2 => '11-50',
        3 => '51-80',
        4 => '81-150',
        5 => '151-250',
        6 => '251-500',
        7 => '501-1000',
        8 => '1001-2000',
        9 => 'powyżej 2000',
    ];

    public static $companyPositionOptions = [
        0 => ' ',
        1 => 'prezes/dyrektor generalny/właściciel',
        2 => 'członek zarządu',
        3 => 'dyrektor /kierownik',
        4 => 'specjalista/pracownik',
        5 => 'nie pracuję',
    ];

    public static $companyPositionDetailOptions = [
        0 => '',
        1 => 'ds. administracyjnych',
        2 => 'ds. bezpieczeństwa',
        3 => 'ds. finansowych/księgowych',
        4 => 'ds. informatyki',
        5 => 'ds. kadr (HR)',
        6 => 'ds. logistyki',
        7 => 'ds. marketingu',
        8 => 'ds. produkcji',
        9 => 'ds. sprzedaży/obsługi klienta',
        10 => 'ds. technicznych',
        11 => 'ds. telekomunikacji',
        12 => 'inne',
        13 => 'rencista/emeryt',
        14 => 'studiuję/uczę się',
        15 => 'szukam pracy',
    ];

    /**
     * @var Doctrine_Collection
     */
    private $_userHasEvent;

    /**
     * @param int        $id          Id user
     * @param null|mixed $id_language
     * @param null|mixed $tableName
     *
     * @return User
     */
    public static function find($id, $id_language = null, $tableName = null)
    {
        return Doctrine::getTable('User')->find($id);
    }

    /**
     * @param striong $hash
     *
     * @return User
     */
    public static function findOneByHash($hash)
    {
        return Doctrine::getTable('User')->findOneByHash($hash);
    }

    /**
     * @param string $email
     *
     * @return User
     */
    public static function findOneByEmailAndActive($email)
    {
        return Doctrine_Query::create()
            ->from('User u')
            ->where('u.email = ?', $email)
            ->addWhere('u.is_active = 1')
            ->execute()
            ->getFirst()
        ;
    }

    /**
     * @param striong $hash
     *
     * @return User
     */
    public static function findAllByBaseUser()
    {
        $baseUser = Zend_Registry::get('BaseUser');

        return Doctrine_Query::create()
            ->from('User u')
            ->where('u.id_base_user = ?', $baseUser->getId())
            ->execute()
        ;
    }

    /**
     * @param string $email
     *
     * @return User
     */
    public static function findOneByEmail($email)
    {
        $baseUser = Zend_Registry::get('BaseUser');

        return Doctrine_Query::create()
            ->from('User u')
            ->where('u.id_base_user = ?', $baseUser->getId())
            ->addWhere('u.email = ?', $email)
            ->execute()
            ->getFirst()
        ;
    }

    public function getId()
    {
        return $this->id_user;
    }

    public function getName()
    {
        return trim($this->last_name . ' ' . $this->first_name);
    }

    public function getFirstName()
    {
        return $this->first_name;
    }

    public function getLastName()
    {
        return $this->last_name;
    }

    public function getEmail()
    {
        return $this->email;
    }

    public function getEmailNew()
    {
        return $this->email_new;
    }

    public function getCompany()
    {
        return $this->company;
    }

    public function getBrand()
    {
        return $this->brand;
    }

    public function getPosition()
    {
        return $this->position;
    }

    public function getCity()
    {
        return $this->city;
    }

    public function getStreet()
    {
        return $this->street;
    }

    public function getPostCode()
    {
        return $this->post_code;
    }

    public function getCountry()
    {
        return $this->country;
    }

    public function getNip()
    {
        return $this->nip;
    }

    public function getHashPassword($pass)
    {
        return md5($this->hash . $pass);
    }

    public function getHash()
    {
        return $this->hash;
    }

    public function getPhone()
    {
        return $this->phone;
    }

    public function getMobilePhone()
    {
        return $this->mobile_phone;
    }

    /**
     * @param string $value
     *
     * @return User
     */
    public function setFirstName($value)
    {
        $this->first_name = $value;

        return $this;
    }

    /**
     * @param string $value
     *
     * @return User
     */
    public function setLastName($value)
    {
        $this->last_name = $value;

        return $this;
    }

    /**
     * @param string $value
     *
     * @return User
     */
    public function setEmail($value)
    {
        $this->email = $value;

        return $this;
    }

    /**
     * @param string $value
     *
     * @return \User
     */
    public function setEmailNew($value)
    {
        $this->email_new = $value;

        return $this;
    }

    /**
     * @param string $value
     *
     * @return User
     */
    public function setPhone($value)
    {
        $this->phone = $value;

        return $this;
    }

    /**
     * @param string $value
     *
     * @return User
     */
    public function setPassword($value)
    {
        $this->password = $this->getHashPassword($value);

        return $this;
    }

    public function isNew()
    {
        return null === $this->getId();
    }

    public function hasAccess($permission = null, $model = null)
    {
        $hasAccess = false;

        if (UserRole::ROLE_ADMIN === (int)$this->id_user_role) {
            return true;
        }

        if (null !== $model) {
            $hasAccess = $this->isCreator($model);
            if (false === $hasAccess) {
                if (method_exists($model, 'hasAccess')) {
                    $hasAccess = $model->hasAccess($this);
                }
            }

            return $hasAccess;
        }

        if (null !== $permission) {
            $acl = Zend_Registry::get('Engine_Acl');

            return $acl->isAllowed($this->UserRole->role, $permission);
        }

        return $hasAccess;
    }

    public function isAdmin()
    {
        return UserRole::ROLE_ADMIN == $this->id_user_role;
    }

    public function isOrganizer()
    {
        return UserRole::ROLE_ORGANIZER == $this->id_user_role;
    }

    public function isExhibotor()
    {
        return UserRole::ROLE_EXHIBITOR == $this->id_user_role;
    }

    public function isUser()
    {
        return UserRole::ROLE_USER == $this->id_user_role;
    }

    /**
     * @param null|string $hash
     * @param null|mixed  $id_language
     *
     * @return Doctrine_Collection
     */
    public function getUserHasEvents($id_language = null)
    {
        $id_language = null === $id_language ? Engine_I18n::getLangId() : $id_language;

        $userHasEvent = $this->_userHasEvent;
        if (null === $userHasEvent) {
            $baseUser = Zend_Registry::get('BaseUser');
            $query = Doctrine_Query::create()
                ->from('Event e INDEXBY e.hash')
                ->leftJoin('e.Translations et WITH et.id_language = ?', $id_language)
                ->where('e.is_active = 1')
                ->addWhere('e.id_base_user = ?', $baseUser->getId())
            ;

            if (!$this->isAdmin()) {
                $query->innerJoin('e.ExhibParticipation ep INDEXBY ep.hash');
                $query->addWhere('ep.is_active = 1');
                $query->addWhere('ep.id_user = ?', $this->getId());
                $query->addWhere('ep.id_exhib_participation_type != ?', ExhibParticipationType::TYPE_PARTICIPANT);
            }

            $userHasEvent = $query->execute();
            $this->_userHasEvent = $userHasEvent;
        }

        return $userHasEvent;
    }

    /**
     * @param string $hash
     *
     * @throws Exception
     *
     * @return Event
     */
    public function getUserHasEvent($hash)
    {
        $userHasEvents = $this->getUserHasEvents();
        if (!isset($userHasEvents[$hash])) {
            throw new Exception('User (' . $this->getId() . ') deny access to menage event (' . $hash . ')');
        }

        return $userHasEvents[$hash];
    }

    /**
     * @param string $hash
     *
     * @return bool
     */
    public function checkUserHasEvent($hash)
    {
        $userHasEvents = $this->getUserHasEvents();

        return isset($userHasEvents[$hash]) ? true : false;
    }

    public function preSave($event)
    {
        if (!empty($this->company_position) && 5 == $this->company_position && !empty($this->city)) {
            $this->setIsFullRegistration(true);
            // Statystyki - punkty za rozszerzoną rejestrację
            // Sprawdzam czy punkty zostały juz naliczone. Jeśli nie to naliczam
            if (!Statistics::checkEntry(Statistics::CHANNEL_ACCOUNT_REGISTRATION_EXTENDED, $this->getId(), Zend_Registry::get('SelectedEvent')->getId())) {
                Statistics_Service_Manager::add(Statistics::CHANNEL_ACCOUNT_REGISTRATION_EXTENDED, $this->getId(), Zend_Registry::get('SelectedEvent')->getId());
            }
        } elseif (!empty($this->company_position) &&
            !empty($this->company) &&
            !empty($this->city) &&
            !empty($this->post_code) &&
            !empty($this->company_id_brand) &&
            !empty($this->company_position) &&
            !empty($this->position)
        ) {
            $this->setIsFullRegistration(true);
            // Statystyki - punkty za rozszerzoną rejestrację
            // Sprawdzam czy punkty zostały juz naliczone. Jeśli nie to naliczam
            if (!Statistics::checkEntry(Statistics::CHANNEL_ACCOUNT_REGISTRATION_EXTENDED, $this->getId(), Zend_Registry::get('SelectedEvent')->getId())) {
                Statistics_Service_Manager::add(Statistics::CHANNEL_ACCOUNT_REGISTRATION_EXTENDED, $this->getId(), Zend_Registry::get('SelectedEvent')->getId());
            }
        } elseif (
            !empty($this->company_position) &&
            !empty($this->city) &&
            !empty($this->company_id_brand) &&
            !empty($this->company_position) &&
            !empty($this->position)
        ) {
            $this->setIsFullRegistration(true);
            // Statystyki - punkty za rozszerzoną rejestrację
            // Sprawdzam czy punkty zostały juz naliczone. Jeśli nie to naliczam
            if (!Statistics::checkEntry(Statistics::CHANNEL_ACCOUNT_REGISTRATION_EXTENDED, $this->getId(), Zend_Registry::get('SelectedEvent')->getId())) {
                Statistics_Service_Manager::add(Statistics::CHANNEL_ACCOUNT_REGISTRATION_EXTENDED, $this->getId(), Zend_Registry::get('SelectedEvent')->getId());
            }
        } else {
            $this->setIsFullRegistration(false);

            // Sprawdzam czy punkty zostały juz naliczone. Jeśli tak to kasuje.
            if (Statistics::checkEntry(Statistics::CHANNEL_ACCOUNT_REGISTRATION_EXTENDED, $this->getId(), Zend_Registry::get('SelectedEvent')->getId())) {
                Statistics::delEntry(Statistics::CHANNEL_ACCOUNT_REGISTRATION_EXTENDED, $this->getId(), Zend_Registry::get('SelectedEvent')->getId());
            }
        }
    }

    public function hasImage()
    {
        return (bool) $this->avatar_image;
    }

    public function deleteImage()
    {
        if ($this->hasImage()) {
            $this->avatar_image = false;
            $this->id_image = null;
            $this->save();
        }
    }

    public function getBrowserPath()
    {
        return $this->BaseUser->getPrivateFilesPath() . '/' . self::DIRECTORY;
    }

    public function getBrowserImagePath()
    {
        return $this->BaseUser->getPublicBrowserPath() . '/' . self::DIRECTORY_PUBLIC;
    }

    public function getAbsoluteImagePath($createDir = true)
    {
        $relativePath = $this->BaseUser->getPublicRelativePath($createDir);
        if ($createDir) {
            $utils = Engine_Utils::getInstance();
            $relativePath = $utils->createDirWithPath($relativePath, self::DIRECTORY_PUBLIC, '/');
        } else {
            $relativePath = $relativePath . DS . self::DIRECTORY_PUBLIC;
        }

        return $relativePath;
    }

    private function isCreator($model)
    {
        if (isset($model->id_user_created) && $this->getId() == $model->id_user_created) {
            return true;
        }

        return false;
    }
}

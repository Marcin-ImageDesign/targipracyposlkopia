<?php

/**
 * EventFile.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     ##NAME## <##EMAIL##>
 *
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EventFile extends Table_EventFile
{
    const IMAGE_WIDTH = 150;
    const IMAGE_HEIGHT = 210;

    const DIRECTORY_FILE = '_db/event/file';

    /**
     * @param string $hash
     *
     * @return EventFile
     */
    public static function findOneByHash($hash)
    {
        return Doctrine::getTable('EventFile')->findOneByHash($hash);
    }

    /**
     * @param mixed $id
     *
     * @return EventFile
     */
    public static function findOneByIdEventFile($id)
    {
        return Doctrine_Query::create()
            ->from('EventFile ef')
            ->where('ef.id_event_file = ?', $id)
            ->execute()
            ->getFirst()
        ;
    }

    public function getId()
    {
        return $this->getField('id_event_file');
    }

    public function getTitle()
    {
        return $this->getField('title');
    }

    /**
     * @param string $value
     *
     * @return EventFile
     */
    public function setTitle($value)
    {
        return $this->setField('title', $value);
    }

    public function getLead()
    {
        return $this->getField('lead');
    }

    /**
     * @param string $value
     *
     * @return EventFile
     */
    public function setLead($value)
    {
        return $this->setField('lead', $value);
    }

    public function getHash()
    {
        return $this->getField('hash');
    }

    /**
     * @param string $value
     *
     * @return EventFile
     */
    public function setHash($value)
    {
        return $this->setField('hash', $value);
    }

    public function getFileExt()
    {
        return $this->getField('file_ext');
    }

    /**
     * @param string $value
     *
     * @return EventFile
     */
    public function setFileExt($value)
    {
        return $this->setField('file_ext', $value);
    }

    public function getImageExt()
    {
        return $this->getField('image_ext');
    }

    /**
     * @param string $value
     *
     * @return EventFile
     */
    public function setImageExt($value)
    {
        return $this->setField('image_ext', $value);
    }

    public function getField($field)
    {
        return $this->{$field};
    }

    /**
     * @param string $value
     * @param mixed  $field
     *
     * @return EventFile
     */
    public function setField($field, $value)
    {
        $this->{$field} = $value;

        return $this;
    }

    public function isNew()
    {
        return null === $this->getId();
    }

    //--------------------- MOTEDY OBSŁUGI PLIKU -------------------//

    public function getFileName()
    {
        return 'file_' . $this->hash . '.' . $this->getFileExt();
    }

    public function getImageName()
    {
        return 'image_' . $this->hash . '.' . $this->getImageExt();
    }

    /**
     * Metoda zwraca ścieżkę zapisu dla plików eventu
     * Jeśli katalogu nie ma próbuje go utworzyć.
     *
     * @param bool $createDir
     *
     * @return string
     */
    public function getAbsolutePath($createDir = true)
    {
        $relativePath = $this->Event->BaseUser->getPublicRelativePath($createDir);
        if ($createDir) {
            $utils = Engine_Utils::getInstance();
            $relativePath = $utils->createDirWithPath($relativePath, self::DIRECTORY_FILE, '/');
        } else {
            $relativePath = $relativePath . DS . self::DIRECTORY_FILE;
        }

        return $relativePath;
    }

    public function getBrowserPath()
    {
        return $this->Event->BaseUser->getPublicBrowserPath() . '/' . self::DIRECTORY_FILE;
    }

    public function getBrowserFile()
    {
        return $this->getBrowserPath() . '/' . $this->getFileName();
    }

    public function getBrowserImage()
    {
        return $this->getBrowserPath() . '/' . $this->getImageName();
    }

    public function getRelativeFile()
    {
        return $this->getAbsolutePath() . DS . $this->getFileName();
    }

    public function getRelativeImage()
    {
        return $this->getAbsolutePath() . DS . $this->getImageName();
    }

    public function fileExists()
    {
        if (!empty($this->file_ext) && file_exists($this->getRelativeFile())) {
            return true;
        }

        return false;
    }

    public function imageExists()
    {
        if (!empty($this->image_ext) && file_exists($this->getRelativeImage())) {
            return true;
        }

        return false;
    }

    public function deleteFile()
    {
        if ($this->fileExists()) {
            unlink($this->getRelativeFile());
        }
        $this->setFileExt('');
    }

    public function deleteImage()
    {
        if ($this->imageExists()) {
            unlink($this->getRelativeImage());
        }
        $this->setImageExt('');
    }

    //--------------------- MOTEDY OBSŁUGI PLIKU -------------------//

    public function postDelete($event)
    {
        $this->deleteFile();
        $this->deleteImage();
    }

    public static function findByEventId($event_id)
    {
        $query = Doctrine_Query::create()
            ->from('EventFile ef')
            ->where(' ef.id_event = ? ', [$event_id])
        ;

        return $query->execute();
    }

    /**
     * @param type $event_ids - tablica id eventów
     *
     * @return type
     */
    public static function getMaterialsForArchivalEventIds($event_ids)
    {
        if (!empty($event_ids)) {
            $query = Doctrine_Query::create()
                ->from('EventFile ef')
                ->leftJoin('ef.Event e')
                ->where('e.is_archive = 1')
                ->whereIn('e.id_event', $event_ids)
                ->orderBy('e.date_start DESC, ef.title')
            ;
            $query_results = $query->execute();

            if ($query_results->count() > 0) {
                $result = [];
                foreach ($query_results as $query_result) {
                    $result[$query_result->id_event][] = $query_result;
                }

                return $result;
            }
        }

        return [];
    }
}

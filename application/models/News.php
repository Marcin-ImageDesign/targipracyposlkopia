<?php

/**
 * News.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     ##NAME## <##EMAIL##>
 *
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class News extends Table_News implements Engine_Doctrine_Record_IdentifiableInterface
{
    const DIRECTORY = '_db/news';

    const IMAGE_WIDTH = 800;
    const IMAGE_HEIGHT = 600;

    const IMAGE_WIDTH_THUMB = 120;
    const IMAGE_HEIGHT_THUMB = 80;

    public function getStandUriByStandId()
    {
        $standUri = Doctrine_Query::create()
            ->select('est.uri')
            ->from('ExhibStandTranslation est')
            ->where('est.id_exhib_stand = ?', $this->getIdStand())
            ->execute()
        ;

        $stand = $standUri->getData();
        $stand = $stand[0]->_data;

        return $stand['uri'];
    }

    public function getHallUriByEventId()
    {
        $hallMap = Doctrine_Query::create()
            ->select('ehm.uri')
            ->from('EventHallMap ehm')
            ->where('ehm.id_event = ?', $this->getIdEvent())
            ->execute()
        ;

        $hall = $hallMap->getData();
        $hall = $hall[0]->_data;

        return $hall['uri'];
    }

    public function getData()
    {
        return $this->_data;
    }

    public function getId()
    {
        return $this->id_news;
    }

    public function isNew()
    {
        return null === $this->getId();
    }

    public function getTitle()
    {
        return $this->getField('title');
    }

    public function setTitle($value)
    {
        $this->setField('title', $value);
    }

    public function getPublicationStart()
    {
        return $this->publication_start;
    }

    public function setPublicationStart($value)
    {
        if (empty($value)) {
            $value = null;
        }
        $this->publication_start = $value;
    }

    public function getPublicationEnd()
    {
        return $this->publication_end;
    }

    public function setPublicationEnd($value)
    {
        if (empty($value)) {
            $value = null;
        }

        $this->publication_end = $value;
    }

    public function setIsActive($value)
    {
        return (bool) $this->is_active = $value;
    }

    public function getIsActive($value)
    {
        return (bool) $this->is_active;
    }

    public function setIsPromoted($value)
    {
        return (bool) $this->is_promoted = $value;
    }

    public function getIsPromotede($value)
    {
        return (bool) $this->is_promoted;
    }

    public function getLinkOutside()
    {
        return $this->getField('link_outside');
    }

    public function setLinkOutside($value)
    {
        $this->setField('link_outside', $value);
    }

    public function getLead()
    {
        return $this->getField('lead');
    }

    public function setLead($value)
    {
        $this->setField('lead', $value);
    }

    public function getText()
    {
        return $this->getField('text');
    }

    public function setText($value)
    {
        $this->setField('text', $value);
    }

    public function setIsMetatag($value)
    {
        return (bool) $this->is_metatag = $value;
    }

    public function getIsMetatag()
    {
        return (bool) $this->is_metatag;
    }

    public function getMetatagTitle()
    {
        return $this->getField('metatag_title');
    }

    public function setMetatagTitle($value)
    {
        $this->setField('metatag_title', $value);
    }

    public function getMetatagDesc()
    {
        return $this->getField('metatag_desc');
    }

    public function setMetatagDesc($value)
    {
        $this->setField('metatag_desc', $value);
    }

    public function getMetatagKey()
    {
        return $this->getField('metatag_key');
    }

    public function setMetatagKey($value)
    {
        $this->setField('metatag_key', $value);
    }

    public function getUri()
    {
        return $this->getField('uri');
    }

    public function setUri($value)
    {
        $this->setField('uri', $value);
    }

    public function setIdEvent($value)
    {
        return $this->id_event = $value;
    }

    public function setIdStand($value)
    {
        return $this->id_exhib_stand = $value;
    }

    public function getIdStand()
    {
        return $this->id_exhib_stand;
    }

    public function getIdEvent()
    {
        return $this->id_event;
    }

    public function getField($field)
    {
        return $this->getTranslation()->{$field};
    }

    public function setField($field, $value)
    {
        $this->getTranslation()->{$field} = $value;
    }

    public function setChatSchedule($value)
    {
        return (bool) $this->chat_schedule = $value;
    }

    public function getChatSchedule()
    {
        return (bool) $this->chat_schedule;
    }

    /**
     * @param null|int $id_language
     *
     * @return NewsTranslation
     */
    public function getTranslation($id_language = null)
    {
        $id_language = null === $id_language ? Engine_I18n::getLangId() : $id_language;
        if (!isset($this->Translations[$id_language])) {
            $translation = NewsTranslation::find($this->getId(), $id_language);
            if ($translation) {
                $this->Translations[$id_language] = $translation;
            }
        }

        return $this->Translations[$id_language];
    }

    /**
     * @param string $hash
     * @param BaseUser|null $baseUser
     * @param Language|null $language
     *
     * @return News
     * @throws Doctrine_Query_Exception
     */
    public static function findOneByHash($hash, $baseUser = null, $language = null)
    {
        $query = Doctrine_Query::create()
            ->from('News n')
            ->where('n.hash = ?', [$hash])
        ;

        if (null !== $language && !$baseUser->isDefaultLanguage($language) && isset($language->BaseUserLanguageOne)) {
            $query->leftJoin('n.NewsLanguageOne nlo WITH nlo.id_base_user_language = ?', $language->BaseUserLanguageOne->getId());
        }

        return $query->execute()->getFirst();
    }

    /**
     * @param strins $uri
     * @param int    $id_language
     *
     * @return false|News
     */
    public static function find($uri, $id_language = null, $tableName = null)
    {
        $id_language = null === $id_language ? Engine_I18n::getLangId() : $id_language;

        return Doctrine_Query::create()
            ->from('News n')
            ->leftJoin('n.Translations t WITH t.id_language = ?', $id_language)
            ->where('t.uri = ?', $uri)
            ->limit(1)
            ->execute()
            ->getFirst()
        ;
    }

    /**
     * @param string   $uri
     * @param BaseUser $baseUser
     * @param Language $language
     *
     * @return News
     */
    //wyączone teraz używamy find
    // static public function findOneByUriAndIdBaseUser( $uri, $baseUser, $language = null )
    // {
    //     $query = Doctrine_Query::create()
    //         ->from('News n')
    //         ->leftJoin('n.Translations t')
    //         ->innerJoin('n.BaseUser bu')
    //         ->where('n.id_base_user = ?', $baseUser->getId() )
    //         ->limit(1);

    //     return $query->execute()->getFirst();
    // }

    /**
     * @param Language $language
     *
     * @return bool
     */
    public function languageExists($language)
    {
        if ($this->BaseUser->isDefaultLanguage($language) || isset($this->NewsLanguageOne)) {
            return true;
        }

        return false;
    }

    public function translationExists()
    {
        $title = $this->getTitle();

        return empty($title) ? false : true;
    }
}

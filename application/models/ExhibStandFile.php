<?php

/**
 * ExhibStandFile.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     ##NAME## <##EMAIL##>
 *
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ExhibStandFile extends Table_ExhibStandFile
{
    const DIRECTORY = 'stand';
    const DIRECTORY_PUBLIC = '_db/stand/file';

    // limit na ilość opublikowanych plików dla typów stoisk
    public static $publishedLimit = [
        ExhibStand::STAND_LEVEL_MAIN => 3,
        ExhibStand::STAND_LEVEL_REGIONAL => 2,
        ExhibStand::STAND_LEVEL_STANDARD => 1,
    ];

    /**
     * @param mixed $id
     *
     * @return ExhibStandFile
     */
    public static function find($id, $id_language = null, $tableName = null)
    {
        return Doctrine::getTable('ExhibStandFile')->find($id);
    }

    public function getId()
    {
        return $this->id_exhib_stand_file;
    }

    public function getHash()
    {
        return $this->hash;
    }

    public function getName()
    {
        return $this->name;
    }

    public function getIdExhibStand()
    {
        return $this->id_exhib_stand;
    }

    public function getDescription()
    {
        return $this->getField('description');
    }

    public function setDescription($value)
    {
        $this->setField('description', $value);
    }

    public function getFileName()
    {
        return $this->getId() . '.' . $this->file_ext;
    }

    public function getBrowserFileName()
    {
        return $this->uri . '.' . $this->file_ext;
    }

    /**
     * @param string $value
     *
     * @return ExhibStandFile
     */
    public function setFileExt($value)
    {
        return $this->file_ext = $value;
    }

    public function isNew()
    {
        return null === $this->getId();
    }

    public function isGraphical()
    {
        $graphicalExt = explode(", ", ALLOWED_IMAGE_EXTENSIONS);

        if (!empty($this->file_ext) && in_array($this->file_ext, $graphicalExt, true)) {
            return true;
        }

        return false;
    }

    public function getRelativePath($createDir = true)
    {
        $relativePath = $this->BaseUser->getPrivateFilesPath($createDir);
        if ($createDir) {
            $utils = Engine_Utils::getInstance();
            $relativePath = $utils->createDirWithPath($relativePath, self::DIRECTORY, '/');
        } else {
            $relativePath = $relativePath . DS . self::DIRECTORY;
        }

        return $relativePath;
    }

    public function getAbsoluteImagePath($createDir = true)
    {
        $relativePath = $this->BaseUser->getPublicRelativePath($createDir);
        if ($createDir) {
            $utils = Engine_Utils::getInstance();
            $relativePath = $utils->createDirWithPath($relativePath, self::DIRECTORY_PUBLIC, '/');
        } else {
            $relativePath = $relativePath . DS . self::DIRECTORY_PUBLIC;
        }

        return $relativePath;
    }

    public function getRelativeFile($createDir = true)
    {
        return $this->getRelativePath($createDir) . DS . $this->getFileName();
    }

    public function getRelativeFileThumb($createDir = true)
    {
        return $this->getRelativePath($createDir) . DS . 'thumb_' . $this->getFileName();
    }

    public function getBrowserPath()
    {
        return $this->BaseUser->getPrivateFilesPath() . '/' . self::DIRECTORY;
    }

    public function getBrowserImagePath()
    {
        return $this->BaseUser->getPublicBrowserPath() . '/' . self::DIRECTORY_PUBLIC;
    }

    public function getBrowserFile()
    {
        return $this->getBrowserPath() . '/' . $this->getFileName();
    }

    public function getBrowserGraphicalFileThumb()
    {
        return $this->getBrowserPath() . '/' . 'thumb_' . $this->getFileName();
    }

    public function getDownloadFile()
    {
        return $this->getBrowserPath() . '/' . $this->getFileName();
    }

    public function deleteFile()
    {
        if ($this->fileExists()) {
            unlink($this->getRelativeFile());
            if ($this->isGraphical()) {
                unlink($this->getRelativeFileThumb());
            }
        }
        $this->setFileExt('');
    }

    public function fileExists()
    {
        if (!empty($this->file_ext) && file_exists($this->getRelativeFile())) {
            return true;
        }

        return false;
    }

    public static function findOneByHash($hash, $baseUser, $language = null)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibStandFile sf')
            ->leftJoin('sf.ExhibStand s')
            ->where('sf.hash = ?', [$hash]);

        if (null !== $language && !$baseUser->isDefaultLanguage($language) && isset($language->BaseUserLanguageOne)) {
            $query->leftJoin('sf.ExhibStandFileLanguageOne eslo WITH eslo.id_base_user_language = ?', $language->BaseUserLanguageOne->getId());
        }

        return $query->execute()->getFirst();
    }

    public static function findStandFile($id_stand, $baseUser)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibStandFile sf')
            ->leftJoin('sf.ExhibStand s')
            ->where('sf.id_exhib_stand = ? AND sf.id_base_user = ? AND sf.is_visible = 1', [$id_stand, $baseUser->getId()]);

        return $query->execute();
    }

    public static function findByEvent($id_event, $is_published = null)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibStandFile sf')
            ->leftJoin('sf.ExhibStand s')
            ->where('s.id_event = ? AND sf.is_visible = 1', [$id_event]);
        if (null !== $is_published) {
            $query->addWhere('sf.is_published = ?', [(bool)$is_published]);
        }

        return $query->execute();
    }

    public function getIcon()
    {
        $icon = '';
        $isGraphical = $this->isGraphical();
        if ($isGraphical) {
            $icon = 'jpg.gif';
        } elseif (in_array($this->file_ext, ['doc', 'docx'], true)) {
            $icon = 'word.gif';
        } elseif ('pdf' === $this->file_ext) {
            $icon = 'ico1/pdf.gif';
        } elseif ('ppt' === $this->file_ext) {
            $icon = 'ppt.gif';
        }
        if (!empty($icon)) {
            return '/_images/icon/' . $icon;
        }

        return false;
    }

    public function getField($filed)
    {
        if (isset($this->ExhibStandFileLanguageOne, $this->ExhibStandFileLanguageOne->{$filed})) {
            return $this->ExhibStandFileLanguageOne->{$filed};
        }

        return $this->{$filed};
    }

    public function setField($filed, $value)
    {
        if (isset($this->ExhibStandFileLanguageOne, $this->ExhibStandFileLanguageOne->{$filed})) {
            $this->ExhibStandFileLanguageOne->{$filed} = $value;
        } else {
            $this->{$filed} = $value;
        }
    }

    public function preDelete($event)
    {
        $this->deleteImage();
        $this->deleteFile();
    }

    public function imageExists()
    {
        if (!empty($this->image_ext) && file_exists($this->getAbsoluteImage())) {
            return true;
        }

        return false;
    }

    public function getImageName()
    {
        return 'image_' . $this->hash . '.' . $this->getImageExt();
    }

    public function deleteImage()
    {
        if ($this->imageExists()) {
            unlink($this->getAbsoluteImage());
        }
        $this->setImageExt('');
    }

    public function getBrowserImage()
    {
        return $this->getBrowserImagePath() . '/' . $this->getImageName();
    }

    public function getAbsoluteImage()
    {
        return $this->getAbsoluteImagePath() . DS . $this->getImageName();
    }
}

<?php

/**
 * ExhibParticipation.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     ##NAME## <##EMAIL##>
 *
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ExhibParticipation extends Table_ExhibParticipation
{
    public function getId()
    {
        return $this->id_exhib_participation;
    }

    public function getIdUser()
    {
        return $this->id_user;
    }

    public function setIdUser($value)
    {
        $this->id_user = $value;
    }

    public function getIdEvent()
    {
        return $this->id_event;
    }

    public function setIdEvent($value)
    {
        $this->id_event = $value;
    }

    public function getIdExhibParticipationType()
    {
        return $this->id_exhib_participation_type;
    }

    public function setIdExhibParticipationType($value)
    {
        $this->id_exhib_participation_type = $value;
    }

    public function getHash()
    {
        return $this->hash;
    }

    public function setHash($value)
    {
        $this->hash = $value;
    }

    /**
     * @return bool
     */
    public function isNew()
    {
        return null === $this->getId();
    }

    /**
     * @return bool
     */
    public function isOrganizer()
    {
        return ExhibParticipationType::TYPE_ORGANIZER == $this->id_exhib_participation_type;
    }

    /**
     * @return bool
     */
    public function isExhibitor()
    {
        return ExhibParticipationType::TYPE_EXHIBITOR == $this->id_exhib_participation_type;
    }

    /**
     * @return bool
     */
    public function isModerator()
    {
        return ExhibParticipationType::TYPE_MODERATOR == $this->id_exhib_participation_type;
    }

    /**
     * @return bool
     */
    public function isParticipant()
    {
        return ExhibParticipationType::TYPE_PARTICIPANT == $this->id_exhib_participation_type;
    }

    public function getExhibitors($id_exhib_participation)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibParticipation p')
            ->where('p.id_exhib_participation_type = 2 AND p.id_exhib_participation = ?', [$id_exhib_participation])
        ;

        return $query->execute()->toArray();
    }

    /**
     * @param string $hash
     * @param mixed  $id_user
     *
     * @return ExhibParticipation
     */
    public static function findEventsOrganizer($id_user)
    {
        $query = Doctrine_Query::create()
            ->select(' p.id_event ')
            ->from('ExhibParticipation p')
            ->where('p.id_exhib_participation_type = 1 AND p.id_user = ?', [$id_user])
        ;

        return $query->execute([], Doctrine::HYDRATE_SINGLE_SCALAR);
    }

    /**
     * @param string $hash
     *
     * @return ExhibParticipation
     */
    public static function findOneByHash($hash)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibParticipation p')
            ->where('p.hash = ?', [$hash])
        ;

        return $query->execute()->getFirst();
    }

    /**
     * @param int $id_base_user
     * @param int $id_event
     * @param int $id_participation_type
     *
     * @return ExhibParticipation
     */
    public static function findParticipation($id_base_user, $id_event, $id_participation_type = false)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibParticipation p')
            ->where(' p.is_active = 1 AND p.id_event = ? AND p.id_base_user = ?', [$id_event, $id_base_user])
        ;

        if (!empty($id_participation_type)) {
            $query->addWhere('p.id_exhib_participation_type = ?', $id_participation_type);
        } else {
            $query->addWhere('p.id_exhib_participation_type != 1');
        }

        return $query->execute();
    }

    /**
     * @param array $hashes
     *
     * @return ExhibParticipation
     */
    public static function findParticipationsByHashes($hashes)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibParticipation p')
            ->where(' p.is_active = 1')
            ->whereIn('p.hash', $hashes)
        ;

        return $query->execute();
    }

    public static function findParticipationByUserId($id_user, $id_base_user, $id_event, $id_participation_type = false)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibParticipation p')
//        ->leftJoin('p.ExhibStandParticipation sp')
            ->where(' p.is_active = 1 AND p.id_event = ? AND p.id_base_user = ? AND p.id_user = ?', [$id_event, $id_base_user, $id_user])
            ->limit(1)
        ;

        if (false !== $id_participation_type) {
            $query->addWhere('p.id_exhib_participation_type = ?', $id_participation_type);
        }

        return $query->execute()->getFirst();
    }

    public static function findParticipationExhibitorByUserId($id_user, $id_base_user, $id_event, $id_participation_type = false)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibParticipation p')
            ->leftJoin('p.ExhibStandParticipation sp')
            ->where(' p.is_active = 1 AND p.id_event = ? AND p.id_base_user = ? AND p.id_user = ?', [$id_event, $id_base_user, $id_user])
            ->addWhere('p.id_exhib_participation_type = 2')
            ->limit(1)
        ;

        if (false !== $id_participation_type) {
            $query->addWhere('p.id_exhib_participation_type = ?', $id_participation_type);
        }
//        else {
//            $query->addWhere('p.id_exhib_participation_type != 1');
//        }
        return $query->execute()->getFirst();
    }

    public static function findManyParticipationsByUserId($id_user, $id_base_user, $id_event, $id_participation_type = false)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibParticipation p')
            ->leftJoin('p.ExhibStandParticipation sp')
            ->where(' p.is_active = 1 AND p.id_event = ? AND p.id_base_user = ? AND p.id_user = ?', [$id_event, $id_base_user, $id_user])
        ;

        if (false !== $id_participation_type) {
            $query->addWhere('p.id_exhib_participation_type = ?', $id_participation_type);
        }
//        else {
//            $query->addWhere('p.id_exhib_participation_type != 1');
//        }

        return $query->execute();
    }

    public static function findParticipationsByUserId($id_user, $id_base_user, $is_active = true)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibParticipation p')
            ->leftJoin('p.ExhibStandParticipation sp')
            ->where('p.id_base_user = ? AND p.id_user = ?', [$id_base_user, $id_user])
        ;

        if (!empty($is_active)) {
            $query->addWhere(' p.is_active = 1 ');
        }
//        if(!empty($id_participation_type)) {
//            $query->addWhere('p.id_exhib_participation_type = ?', $id_participation_type);
//        } else {
//            $query->addWhere('p.id_exhib_participation_type != 1');
//        }

        return $query->execute();
    }

    /**
     * @param int $id_base_user
     * @param int $id_event
     * @param int $id_participation_type
     *
     * @return ExhibParticipation
     */
    public static function findStands($id_base_user, $id_event)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibStandParticipation sp')
            ->leftJoin('sp.ExhibStand s')
            ->leftJoin('sp.ExhibParticipation p')
            ->where(' sp.is_active = 1 AND p.is_active = 1 AND s.is_active = 1 AND p.id_exhib_participation_type IN (1,2)
                    AND p.id_event = ? AND p.id_base_user = ? AND s.id_exhib_stand_type = ?', [$id_event, $id_base_user, ExhibStandType::STANDARD])
        ;

        return $query->execute();
    }

    public static function findByStandParticipationHash($hash)
    {
        $query = Doctrine_Query::create()
            ->from('ExhibParticipation p')
            ->leftJoin('p.ExhibStandParticipation sp')
            ->where('sp.hash = ?', [$hash])
        ;

        return $query->execute();
    }

    public static function findEventByParticipationHash($participation_hash)
    {
        $query = Doctrine_Query::create()
            ->from('Event ee')
            ->leftJoin('ee.ExhibParticipation ep')
            ->where('ep.hash = ?', [$participation_hash])
            ->limit(1)
        ;

        return $query->execute()->getFirst();
    }

    public static function findOneById($id_exhib_participation)
    {
        return Doctrine_Query::create()
            ->from('ExhibParticipation ep')
            ->where('ep.id_exhib_participation = ?', $id_exhib_participation)
            ->execute()
            ->getFirst()
        ;
    }
}

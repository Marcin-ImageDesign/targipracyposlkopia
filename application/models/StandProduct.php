<?php

/**
 * StandProduct.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     ##NAME## <##EMAIL##>
 *
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class StandProduct extends Table_StandProduct implements Engine_Doctrine_Record_IdentifiableInterface
{
    const INQUIRY_CHANNEL_PRODUCT = 'stand-product';

    //	const PODUCT_PICTURE_WIDTH = 316;
//    const PODUCT_PICTURE_HEIGHT = 165;
//    const PODUCT_PICTURE_THUMB_WIDTH = 140;
//    const PODUCT_PICTURE_THUMB_HEIGHT = 79;
//    const PRODUCT_PHOTO_FILE_PRE = 'product_photo_';
//    const PRODUCT_PHOTO_DIR = '_db/product';

    public function getId()
    {
        return $this->id_stand_product;
    }

    public function setName($value)
    {
        return $this->setField('name', $value);
    }

    public function getName()
    {
        return $this->getField('name');
    }

    public function setLead($value)
    {
        return $this->setField('lead', $value);
    }

    public function getLead()
    {
        return $this->getField('lead');
    }

    public function getKeywords()
    {
        return $this->getField('keywords');
    }

    public function setKeywords($value)
    {
        return $this->setField('keywords', $value);
    }

    public function getIdStand()
    {
        return $this->id_exhib_stand;
    }

    public function setDescription($value)
    {
        return $this->setField('description', $value);
    }

    public function getDescription()
    {
        return $this->getField('description');
    }

    public function setPrice($value)
    {
        return $this->price = $value;
    }

    public function getPrice()
    {
        return $this->price;
    }

    public function setOriginalPrice($value)
    {
        return $this->original_price = $value;
    }

    public function getOriginalPrice()
    {
        return $this->original_price;
    }

    public function originalPriceExists()
    {
        return ($this->getOriginalPrice() && '0.00' !== $this->getOriginalPrice()) ? true : false;
    }

    public function priceExists()
    {
        return ($this->getPrice() && '0.00' !== $this->getPrice()) ? true : false;
    }

    public function setLink($value)
    {
        return $this->setField('link', $value);
    }

    public function getLink()
    {
        return $this->getField('link');
    }

    public function isLink()
    {
        $link = $this->getLink();

        return !empty($link) ? true : false;
    }

    public function getCreatedAt()
    {
        return $this->created_at;
    }

    public function setIsActive($value)
    {
        return $this->is_active = $value;
    }

    public function getIsActive()
    {
        return (bool) $this->is_active;
    }

    public function setIsPromotion($value)
    {
        return $this->is_promotion = $value;
    }

    public function getIsPromotion()
    {
        return (bool) $this->is_promotion;
    }

    public function setModificatedAt($value)
    {
        return $this->modificated_at = $value;
    }

    public function getModificatedAt()
    {
        return $this->modificated_at;
    }

    public function getHash()
    {
        return $this->hash;
    }

    public function isFormTarget()
    {
        return !empty($this->form_target);
    }

    /**
     * @param string     $hash
     * @param null|mixed $id_language
     *
     * @return StandProduct
     */
    public static function findOneByHash($hash, $id_language = null)
    {
        $id_language = null === $id_language ? Engine_I18n::getLangId() : $id_language;

        return Doctrine_Query::create()
            ->from('StandProduct sp')
            ->leftJoin('sp.Translations t WITH t.id_language = ?', $id_language)
            ->addWhere('sp.hash = ?', $hash)
            ->fetchOne()
        ;
    }

    /**
     * @param string     $hash
     * @param mixed      $id_stand_product
     * @param null|mixed $id_language
     *
     * @return StandProduct
     */
    public static function find($id, $id_language = null, $tableName = null)
    {
        $id_language = null === $id_language ? Engine_I18n::getLangId() : $id_language;

        return Doctrine_Query::create()
            ->from('StandProduct sp')
            ->leftJoin('sp.Translations t WITH t.id_language = ?', $id_language)
            ->addWhere('sp.id_stand_product = ?', $id)
            ->fetchOne()
        ;
    }

    public function linkExists()
    {
        return ('' === $this->getLink()) ? false : true;
    }

    /**
     * Metody dla ZdjÄ™cia Produktu.
     * * */
//    public function getAbsoluteProductPhotoPath($createDir = true) {
//        $relativePath = $this->ExhibStand->BaseUser->getPublicRelativePath($createDir);
//        if ($createDir) {
//            $utils = Engine_Utils::getInstance();
//            $relativePath = $utils->createDirWithPath($relativePath, self::PRODUCT_PHOTO_DIR, '/');
//        } else {
//            $relativePath = $relativePath . DS . self::PRODUCT_PHOTO_DIR;
//        }
//
//        return $relativePath;
//    }

//    public function getProductPhotoFileName($type = '') {
//        if (!empty($type)) {
//            $type = '_' . $type;
//        }
//        return self::PRODUCT_PHOTO_FILE_PRE . $this->hash . $type . '.' . $this->image_ext;
//    }

    public function imageExists()
    {
        return !empty($this->id_image) ? true : false;
    }

//    public function productPhotoExists() {
//        if (!empty($this->image_ext) && file_exists($this->getRelativeProductPhoto())) {
//            return true;
//        }
//        return false;
//    }

//    public function getRelativeProductPhoto() {
//        return $this->getAbsoluteProductPhotoPath(true) . DS . $this->getProductPhotoFileName();
//    }
//
//    public function getBrowserProductPhotoPath() {
//        return $this->ExhibStand->BaseUser->getPublicBrowserPath() . '/' . self::PRODUCT_PHOTO_DIR;
//    }
//
//    public function getBrowserProductPhoto() {
//        return $this->getBrowserProductPhotoPath() . '/' . $this->getProductPhotoFileName();
//    }

//    public function deleteProductPhoto() {
//        if ($this->productPhotoExists()) {
//            unlink($this->getRelativeProductPhoto());
//        }
//        $this->setProductPhotoImageExt('');
//    }
//
//    public function setProductPhotoImageExt($ext) {
//        $this->image_ext = $ext;
//    }

    public function getField($field)
    {
        return $this->getTranslation()->{$field};
    }

    public function setField($field, $value)
    {
        $this->getTranslation()->{$field} = $value;
    }

    /**
     * @param null|int $id_language
     *
     * @return StandProductTranslation
     */
    public function getTranslation($id_language = null)
    {
        $id_language = null === $id_language ? Engine_I18n::getLangId() : $id_language;
        if (!isset($this->Translations[$id_language])) {
            $translation = StandProductTranslation::find($this->getId(), $id_language);
            if ($translation) {
                $this->Translations[$id_language] = $translation;
            }
        }

        return $this->Translations[$id_language];
    }

    public function translationExists()
    {
        $name = $this->getName();

        return empty($name) ? false : true;
    }

    public function hasFile()
    {
        $file = StandProductFile::findOneByIdStandProduct($this->getId());

        if (!$file) {
            return false;
        }

        return true;
    }

    public function getFile()
    {
        $file = StandProductFile::findOneByIdStandProduct($this->getId());

        if (!$file) {
            return false;
        }

        return $file;
    }
}

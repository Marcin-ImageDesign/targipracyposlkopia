<?php

/**
 * EventSite.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     ##NAME## <##EMAIL##>
 *
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EventSite extends Table_EventSite
{
    public function getId()
    {
        return $this->id_event_site;
    }

    /**
     * @return string
     */
    public function getHash()
    {
        return $this->hash;
    }

    /**
     * @return text
     */
    public function getTitle()
    {
        return $this->getField('title');
    }

    /**
     * @param string $value
     *
     * @return EventSite
     */
    public function setTitle($value)
    {
        $this->setField('title', $value);

        return $this;
    }

    /**
     * @return content
     */
    public function getContent()
    {
        return $this->getField('content');
    }

    /**
     * @param date $value
     *
     * @return EventSite
     */
    public function setContent($value)
    {
        $this->setField('content', $value);

        return $this;
    }

    public function isActive()
    {
        return $this->is_active;
    }

    public function isProtected()
    {
        return $this->is_protected;
    }

    public function isNew()
    {
        return null === $this->getId();
    }

    public function setIsActive($value)
    {
        $this->is_active = (bool) $value;
    }

    public function getField($filed)
    {
        if (isset($this->EventSiteLanguageOne)) {
            return $this->EventSiteLanguageOne->{$filed};
        }

        return $this->{$filed};
    }

    public function setField($filed, $value)
    {
        if (isset($this->EventSiteLanguageOne)) {
            $this->EventSiteLanguageOne->{$filed} = $value;
        } else {
            $this->{$filed} = $value;
        }
    }

    /**
     * @return text
     */
    public function getUri()
    {
        return $this->getField('uri');
    }

    public function setUri($value)
    {
        $this->setField('uri', $value);

        return $this;
    }

    /**
     * @param string   $hash
     * @param Language $language
     *
     * @return EventSite
     */
    public static function findOneByHash($hash, $language)
    {
        $query = Doctrine_Query::create()
            ->from('EventSite es')
            ->leftJoin('es.EventSiteLanguageOne eslo WITH eslo.id_base_user_language = ?', $language->BaseUserLanguageOne->getId())
            ->where('es.hash = ?', [$hash])
        ;

        return $query->execute()->getFirst();
    }

    /**
     * @param string   $hash
     * @param Language $language
     * @param mixed    $uri
     * @param mixed    $id_event
     *
     * @return EventSite
     */
    public static function findOneByUri($uri, $language, $id_event)
    {

        $query = Doctrine_Query::create()
            ->from('EventSite es')
            ->leftJoin('es.EventSiteLanguageOne eslo WITH eslo.id_base_user_language = ?', $language->BaseUserLanguageOne->getId())
            ->where('eslo.uri = ?', [$uri])
            ->addWhere('es.id_event = ?', [$id_event])
        ;

        return $query->execute()->getFirst();
    }

    /**
     * @param Language $language
     *
     * @return bool
     */
    public function languageExists($language)
    {
        if (Language::DEFAULT_LANGUAGE_CODE == $language->code || isset($this->EventSiteLanguageOne)) {
            return true;
        }

        return false;
    }

    public function getUnprotectedEventSites($id_event)
    {
        return Doctrine_Query::create()
            ->from('EventSite es')
            ->where('es.id_event = ? AND es.is_protected = 0', $id_event)
            ->execute()
        ;
    }

    public function getLastOrderEventSite($id_event)
    {
        $result = Doctrine_Query::create()
            ->select('MAX(es.order) as las_order')
            ->from('EventSite es')
            ->where('es.id_event = ?', $id_event)
            ->execute()
        ;

        return $result->getFirst()->las_order;
    }

    public function preDelete($event)
    {
        Doctrine_Query::create()
            ->update('EventSite es')
            ->set('es.order', 'es.order -1')
            ->where('es.id_event = ?', $this->id_event)
            ->addWhere('es.id_event_site != ?', $this->id_event_site)
            ->addWhere('es.order > ?', $this->order)
            ->execute()
        ;
    }
}

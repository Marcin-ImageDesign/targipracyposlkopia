<?php

/**
 * Menu.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     ##NAME## <##EMAIL##>
 *
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Menu extends Table_Menu
{
    /**
     * Pozycja menu wyświetla własną treść.
     */
    const MENU_TYPE_TEXT = 1;

    /**
     * Pozycja menu prowadzi do linku.
     */
    const MENU_TYPE_LINK = 2;

    public function getId()
    {
        return $this->id_menu;
    }

    public function isNew()
    {
        return null === $this->getId();
    }

    public function getTitle()
    {
        return $this->getField('title');
    }

    public function setTitle($value)
    {
        $this->setField('title', $value);
    }

    public function getText()
    {
        return $this->getField('text');
    }

    public function setText($value)
    {
        $this->setField('text', $value);
    }

    public function getLink()
    {
        return $this->getField('link');
    }

    public function setLink($value)
    {
        $this->setField('link', $value);
    }

    public function getMetatagTitle()
    {
        return $this->getField('metatag_title');
    }

    public function setMetatagTitle($value)
    {
        $this->setField('metatag_title', $value);
    }

    public function getMetatagDesc()
    {
        return $this->getField('metatag_desc');
    }

    public function setMetatagDesc($value)
    {
        $this->setField('metatag_desc', $value);
    }

    public function getMetatagKey()
    {
        return $this->getField('metatag_key');
    }

    public function setMetatagKey($value)
    {
        $this->setField('metatag_key', $value);
    }

    public function getUri()
    {
        return $this->getField('uri');
    }

    public function setUri($value)
    {
        $this->setField('uri', $value);
    }

    public function getUriFull($create = false, $language = null)
    {
        if ($create) {
            if ($this->relatedExists('MenuParent')) {
                // musimy pobrać aby zaciągnąć odpowiednią wersje językową
                $menuParent = self::find($this->MenuParent->getId(), $this->BaseUser, $language);
                $uri_full = $menuParent->getUriFull($create, $language);
            } else {
                $uri_full = '';
            }
        } else {
            return $this->getField('uri_full');
        }

        return ltrim($uri_full . '/' . $this->getUri(), '/');
    }

    public function setUriFull($value)
    {
        $this->setField('uri_full', $value);
    }

    public function getField($filed)
    {
        if (isset($this->MenuLanguageOne)) {
            return $this->MenuLanguageOne->{$filed};
        }

        return $this->{$filed};
    }

    public function setField($filed, $value)
    {
        if (isset($this->MenuLanguageOne)) {
            $this->MenuLanguageOne->{$filed} = $value;
        } else {
            $this->{$filed} = $value;
        }
    }

    /**
     * @param Language $language
     *
     * @return bool
     */
    public function languageExists($language)
    {
        if ($this->BaseUser->isDefaultLanguage($language) || isset($this->MenuLanguageOne)) {
            return true;
        }

        return false;
    }

    /**
     * @param string   $id_menu
     * @param BaseUser $baseUser
     * @param Language $language
     *
     * @return Menu
     */
    public static function find($id, $baseUser = null, $language = null)
    {
        $query = Doctrine_Query::create()
            ->from('Menu m')
            ->where('m.id_menu = ?', [$id])
        ;

        if (null !== $language && !$baseUser->isDefaultLanguage($language) && isset($language->BaseUserLanguageOne)) {
            $query->leftJoin('m.MenuLanguageOne mlo WITH mlo.id_base_user_language = ?', $language->BaseUserLanguageOne->getId());
        }

        return $query->execute()->getFirst();
    }

    /**
     * @param string   $hash
     * @param BaseUser $baseUser
     * @param Language $language
     *
     * @return Menu
     */
    public static function findOneByHash($hash, $baseUser, $language = null)
    {
        $query = Doctrine_Query::create()
            ->from('Menu m')
            ->where('m.hash = ?', [$hash])
        ;

        if (null !== $language && !$baseUser->isDefaultLanguage($language) && isset($language->BaseUserLanguageOne)) {
            $query->leftJoin('m.MenuLanguageOne mlo WITH mlo.id_base_user_language = ?', $language->BaseUserLanguageOne->getId());
        }

        return $query->execute()->getFirst();
    }

    /**
     * @param string   $uri_full
     * @param BaseUser $baseUser
     * @param Language $language
     *
     * @return Menu
     */
    public static function findOneByUriFullAndIdBaseUser($uri_full, $baseUser, $language = null)
    {
        $query = Doctrine_Query::create()
            ->from('Menu m')
            ->where('m.id_base_user = ?', $baseUser->getId())
            ->limit(1)
        ;

        if (null !== $language && !$baseUser->isDefaultLanguage($language) && isset($language->BaseUserLanguageOne)) {
            $query->leftJoin('m.MenuLanguageOne mlo WITH mlo.id_base_user_language = ?', $language->BaseUserLanguageOne->getId());
            $query->addWhere('( m.uri_full = ? OR mlo.uri_full = ?)', [$uri_full, $uri_full]);
        } else {
            $query->addWhere('m.uri_full = ?', [$uri_full]);
        }

        return $query->execute()->getFirst();
    }

    /**
     * @param striong  $hash
     * @param BaseUser $baseUser
     *
     * @return Menu
     */
    public function findOneByHashAndIdBaseUser($hash, $baseUser)
    {
        return Doctrine::getTable('Menu')->findOneByHashAndIdBaseUser($hash, $baseUser->getId());
    }

    /**
     * Czy pozycja menu prowadzi do linku.
     *
     * @return bool
     */
    public function isMenuTypeLink()
    {
        return self::MENU_TYPE_LINK == $this->id_menu_type;
    }

    /**
     * Czy pozycja menu wyświetla własną treść.
     *
     * @return bool
     */
    public function isMenuTypeText()
    {
        return self::MENU_TYPE_TEXT == $this->id_menu_type;
    }

    /**
     * Pobiera ostatnią wartość w ustawieniach kolejności elementu
     * z uwzględnieniem rodzica.
     *
     * @return int
     */
    public function getLastOrder()
    {
        $query = Doctrine_Query::create()
            ->select('MAX(m.order) as max_order')
            ->from('Menu m')
            ->where('m.id_base_user = ?', $this->id_base_user)
        ;

        if (isset($this->MenuParent)) {
            $query->addWhere('m.id_menu_parent = ?', $this->MenuParent->getId());
        } else {
            $query->addWhere('m.id_menu_parent IS NULL');
        }

        return $query->execute()->getFirst()->max_order;
    }

    /**
     * @param Language $language
     */
    public function recreateChildUriFull($language)
    {
        $this->setUriFull($this->getUriFull(true, $language));
        foreach ($this->Menu as $menu) {
            // musimy pobrać menu z odpowiednią wertsją językową dla której
            // ma być przegenerowany uri_full
            $menu = self::find($menu->getId(), $language);
            $menu->recreateChildUriFull($language);
        }
    }

    /**
     * @return Menu
     */
    public function getFirstParent()
    {
        if ($this->relatedExists('MenuParent')) {
            $return = $this->MenuParent->getFirstParent();
        } else {
            return $this;
        }

        return $return;
    }

    public function getArrayToForm()
    {
        $data = [];
        $data['title'] = $this->getTitle();
        $data['id_menu_type'] = $this->id_menu_type;
        $data['link'] = $this->getLink();
        $data['text'] = $this->getText();
        $data['is_metatag'] = $this->is_metatag;
        $data['is_header'] = $this->is_header;
        $data['is_footer'] = $this->is_footer;
        $data['metatag_title'] = $this->getMetatagTitle();
        $data['metatag_desc'] = $this->getMetatagDesc();
        $data['metatag_key'] = $this->getMetatagKey();

        return $data;
    }

    public function preDelete($event)
    {
        $updateOrderQuery = Doctrine_Query::create()
            ->update('Menu m')
            ->set('m.order', 'm.order - 1')
            ->where('m.id_base_user = ?', $this->id_base_user)
            ->addWhere('m.id_menu != ?', $this->getId())
            ->addWhere('m.order > ?', $this->order)
        ;

        if (null === $this->id_menu_parent) {
            $updateOrderQuery->addWhere('m.id_menu_parent IS NULL');
        } else {
            $updateOrderQuery->addWhere('m.id_menu_parent = ?', $this->id_menu_parent);
        }

        $updateOrderQuery->execute();
    }
}

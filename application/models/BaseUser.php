<?php

/**
 * BaseUser.
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     ##NAME## <##EMAIL##>
 *
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BaseUser extends Table_BaseUser
{
    const PRIVATE_PATH = 'base_user';
    const PUBLIC_PATH = 'private/base_user';
    const REPOSITORY_DIR = '_repository';
    const USER_TRIO = 2;
    const USER_VCMS = 1;

    /**
     * @var Doctrine_Collection
     */
    private $baseUserHasLanguage;

    /**
     * @var Doctrine_Collection
     */
    private $baseUserHasModule;

    /**
     * @var Language
     */
    private $defaultLanguage;

    /**
     * @return int
     */
    public function getId()
    {
        return $this->id_base_user;
    }

    public function getHash()
    {
        return $this->getField('hash');
    }

    /**
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    public function setName($value)
    {
        $this->setField('name', $value);
    }

    public function getTranslations()
    {
        return $this->Translation;
    }

    /**
     * @return string
     */
    public function getDomain()
    {
        return $this->getField('domain');
    }

    public function setDomain($value)
    {
        return $this->setField('domain', $value);
    }

    public function getSubdomain()
    {
        return $this->getField('subdomain');
    }

    public function setSubdomain($value)
    {
        return $this->setField('subdomain', $value);
    }

    public function getMetatagTitle()
    {
        return $this->getField('metatag_title');
    }

    public function setMetatagTitle($value)
    {
        $this->setField('metatag_title', $value);
    }

    public function getMetatagDesc()
    {
        return $this->getField('metatag_desc');
    }

    public function setMetatagDesc($value)
    {
        $this->setField('metatag_desc', $value);
    }

    public function getMetatagKey()
    {
        return $this->getField('metatag_key');
    }

    public function setMetatagKey($value)
    {
        $this->setField('metatag_key', $value);
    }

    public function getField($field)
    {
        return $this->{$field};
    }

    public function isActive()
    {
        return (bool) $this->getField('is_active');
    }

    public function isBanned()
    {
        return (bool) $this->getField('is_banned');
    }

    public function setField($filed, $value)
    {
        if (isset($this->MenuLanguageOne)) {
            $this->MenuLanguageOne->{$filed} = $value;
        } else {
            $this->{$filed} = $value;
        }
    }

    public function isNew()
    {
        return null === $this->getId();
    }

    /**
     * @param int $id
     *
     * @return BaseUser
     */
    public static function find($id, $id_language = null, $tableName = null)
    {
        return Doctrine::getTable('BaseUser')->find($id);
    }

    /**
     * @return BaseUser
     */
    public static function findOneByActive()
    {
        return Doctrine::getTable(__CLASS__)->findOneByIsActive(1);
    }

    /**
     * @param string $domain
     *
     * @return BaseUser
     */
    public static function findOneByDomain($domain)
    {
        return Doctrine::getTable('BaseUser')->findOneByDomain($domain);
    }

    /**
     * @param string $subdomain
     *
     * @return BaseUser
     */
    public static function findOneBySubdomain($subdomain)
    {
        return Doctrine::getTable('BaseUser')->findOneBySubdomain($subdomain);
    }

    /**
     * @param string $hash
     *
     * @return BaseUser
     */
    public static function findOneByHash($hash)
    {
        return Doctrine::getTable('BaseUser')->findOneByHash($hash);
    }

    /**
     * @param Doctrine_Record $model
     *
     * @return bool
     */
    public function hasAccess($model)
    {
        if ($model instanceof BaseUser) {
            return $this->id_base_user == $model->id_base_user_created;
        }

        return $this->id_base_user == $model->id_base_user;
    }

    /**
     * Pobieramy bezwzględną ścieżkę prywatnych plików użytkownika
     * przechowywanych poza "zasięgiem" przeglądarki, np: szablony, pliki do pobrania
     * dostępne dla określonych użytkowników.
     *
     * @param mixed $createDir
     *
     * @return string
     */
    public function getPrivateRelativePath($createDir = true)
    {
        $utils = Engine_Utils::getInstance();
        if (!empty($this->directory)) {
            $path = APPLICATION_PRIVATE . DS . self::PRIVATE_PATH . DS . '_' . $this->directory;
            if ($createDir) {
                $utils->createDir($path);
            }
        } else {
            $path = $utils->getDivPath($this->getId(), APPLICATION_PRIVATE . DS . self::PRIVATE_PATH, $createDir);
        }

        return $path;
    }

    /**
     * Sprawdzamy czy katalog szablonów istnieje, jeśli tak włączmy
     * obsługę.
     */
    public function hasPrivateTemplate()
    {
        $path = $this->getPrivateRelativeTemplatePath(false);

        return file_exists($path) && is_dir($path);
    }

    public function hasPrivateModules()
    {
        $path = $this->getPrivateModulesPath(false);

        return file_exists($path) && is_dir($path);
    }

    /**
     * Pobieramy bezwzględną ścieżkę szablonu stronu.
     *
     * @param mixed $createDir
     *
     * @return string
     */
    public function getPrivateRelativeTemplatePath($createDir = true)
    {
        $utils = Engine_Utils::getInstance();
        $path = $this->getPrivateRelativePath($createDir) . DS . 'templates';
        if ($createDir) {
            $utils->createDir($path);
        }

        return $path;
    }

    public function getPrivateModulesPath($createDir = true)
    {
        $utils = Engine_Utils::getInstance();
        $path = $this->getPrivateRelativePath($createDir) . DS . 'modules';
        if ($createDir) {
            $utils->createDir($path);
        }

        return $path;
    }

    public function getPrivateFilesPath($createDir = true)
    {
        $utils = Engine_Utils::getInstance();
        $path = $this->getPrivateRelativePath($createDir) . DS . '_files';
        if ($createDir) {
            $utils->createDir($path);
        }

        return $path;
    }

    /**
     * Zwracamy bezwzględną ścieżkę prywatnych plików użytkownika dostępnych publicznie.
     *
     * @param mixed $createDir
     *
     * @return string
     */
    public function getPublicRelativePath($createDir = false)
    {
        $public_path = self::PUBLIC_PATH;
        if (self::USER_TRIO == $this->getId() && APPLICATION_ENV === 'production') {
            $public_path = '_' . $public_path;
        }

        $utils = Engine_Utils::getInstance();
        if (!empty($this->directory)) {
            $path = APPLICATION_WEB . DS . $public_path . DS . '_' . $this->directory;
            if ($createDir) {
                $utils->createDir($path);
            }
        } else {
            $path = $utils->getDivPath($this->getId(), APPLICATION_WEB . DS . $public_path, $createDir);
        }

        return $path;
    }

    public function getTranslationsByLanguageCode($langCode)
    {
        $language = Language::findOneByCode($langCode);

        $global = Doctrine_Query::create()
            ->from('Translation t')
            ->where('t.id_base_user IS NULL')
            ->addWhere('t.is_active = 1')
            ->addWhere('t.id_language = ?', $language->getId())
            ->execute()
            ->toKeyValueArray('text', 'translation')
        ;

        $ownBaseUser = Doctrine_Query::create()
            ->from('Translation t')
            ->where('t.id_base_user = ?', $this->getId())
            ->addWhere('t.is_active = 1')
            ->addWhere('t.id_language = ?', $language->getId())
            ->execute()
            ->toKeyValueArray('text', 'translation')
        ;

        return array_merge($global, $ownBaseUser);
    }

    /**
     * Zwracamy bezwzględną ścieżkę prywatnych plików użytkownika dostępnych publicznie
     * zarządzanych przez menadżer plików.
     *
     * @param mixed $createDir
     *
     * @return string
     */
    public function getPublicRelativeRepositoryPath($createDir = false)
    {
        $utils = Engine_Utils::getInstance();
        $path = $this->getPublicRelativePath($createDir) . DS . self::REPOSITORY_DIR;
        if ($createDir) {
            $utils->createDir($path);
        }

        return $path;
    }

    /**
     * Zwracamy bezwzględną ścieżkę dla przeglądarki prywatnych plików
     * użytkownika dostępnych publicznie.
     *
     * @return string
     */
    public function getPublicBrowserPath()
    {
        $public_path = self::PUBLIC_PATH;
//        if( $this->getId() == self::USER_TRIO && APPLICATION_ENV == 'production' ){
//            $public_path = '_'.$public_path;
//        }

        $utils = Engine_Utils::getInstance();
        if (!empty($this->directory)) {
            $path = '/' . $public_path . '/_' . $this->directory;
        } else {
            $path = $utils->getDivPath($this->getId(), '/' . $public_path, false, '/');
        }

        return $path;
    }

    /**
     * Zwracamy bezwzględną ścieżkę dla przeglądarki prywatnych plików
     * użytkownika dostępnych publicznie dla menadżera plików.
     *
     * @return string
     */
    public function getPublicBrowserRepositoryPath()
    {
        $utils = Engine_Utils::getInstance();

        return $this->getPublicBrowserPath() . '/' . self::REPOSITORY_DIR;
    }

    /**
     * @return Doctrine_Collection
     */
    public function getBaseUserLanguage()
    {
        if (!$this->baseUserHasLanguage) {
            $this->baseUserHasLanguage = new Doctrine_Collection('Language', 'code');
            $this->baseUserHasLanguage->add($this->getDefaultLanguage());
            $this->baseUserHasLanguage->merge(
                Doctrine_Query::create()
                    ->from('Language l')
                    ->innerJoin('l.BaseUserLanguageOne bulo')
                    ->addWhere('bulo.is_active = 1 AND bulo.id_base_user = ?', $this->getId())
                    ->orderBy('l.name ASC')
                    ->execute()
            );
        }

        return $this->baseUserHasLanguage;
    }

    public function checkBaseUserHasLanguage($code)
    {
        $baseUserHasLanguageList = $this->getBaseUserLanguage();

        return isset($baseUserHasLanguageList[$code]);
    }

    /**
     * @return Doctrine_Collection
     */
    public function getBaseUserModule()
    {
        if (!$this->baseUserHasModule) {
            $this->baseUserHasModule = new Doctrine_Collection('Module', 'dir');
            $this->baseUserHasModule->merge(
                Doctrine_Query::create()
                    ->from('Module m')
//					->innerJoin('m.BaseUserModule bum')
//					->where('m.is_active = 1 AND bum.is_active = 1' )
//					->addWhere('bum.id_base_user = ?', $this->getId() )
                    ->execute()
            );
        }

        return $this->baseUserHasModule;
    }

    public function checkBaseUserModule($module)
    {
        $baseUserHasModuleList = $this->getBaseUserModule();

        return isset($baseUserHasModuleList[$module]);
    }

    public function getSettingsFromFile($name, $allowEmpty = false)
    {
        $filename = $this->getSettingsPath() . DS . $name . '.php';

        if (!file_exists($filename)) {
            if ($allowEmpty) {
                $file_config = [];
            } else {
                throw new Exception('File settings not found: ' . $filename);
            }
        } else {
            $file_config = include $filename;
        }

        return $file_config;
    }

    public function getSettings($type)
    {
        $method_name = 'getSettings' . ucfirst($type);
        if (method_exists($this, $method_name)) {
            return $this->{$method_name}();
        }

        throw new Exception('No settings found');
    }

    public function getSettingsSmtp()
    {
        return Engine_Variable::getInstance()->getVariablesSmtp($this->getId());
    }

    /**
     * @return array
     */
    public function getVariables()
    {
        return Engine_Variable::getInstance()->getVariables($this->getId());
    }

    /**
     * @param mixed $name
     *
     * @return string
     */
    public function getVariable($name)
    {
        return Engine_Variable::getInstance()->getVariable($name, $this->getId());
    }

    public static function getPositionsForBaseUser($translate = null)
    {
        $identity = Zend_Auth::getInstance()->getIdentity();
        $userRoles = new Doctrine_Collection('UserRole', 'id_user_role');
        $query = Doctrine_Query::create()
            ->from('UserRole ur')
            ->where('ur.id_base_user IS NULL OR ur.id_base_user = ?', $identity->BaseUser->getId())
        ;
        $userRoles->merge($query->execute());
        $rolesAr = ['' => ''];
        foreach ($userRoles as $role) {
            $rolesAr[$role->getId()] = !empty($translate) ? $translate->translate('label_admin_user_role_' . $role->getId()) : $role->getRoleName();
        }

        return $rolesAr;
    }

    /**
     * @return Language
     */
    public function getDefaultLanguage()
    {
        if (null === $this->defaultLanguage) {
            if (null !== $this->id_language) {
                $this->defaultLanguage = $this->Language;
            } else {
                $this->defaultLanguage = Language::getDefault();
            }
        }

        return $this->defaultLanguage;
    }

    /**
     * @param Language $language
     *
     * @return bool
     */
    public function isDefaultLanguage($language)
    {
        return $language->code == $this->getDefaultLanguage()->code;
    }

    public function isSuperAdmin()
    {
        if (self::USER_VCMS == $this->getId()) {
            $userAuth = Zend_Auth::getInstance()->getIdentity();
            if ($userAuth) {
                if ($userAuth instanceof User) {
                    if (UserRole::ROLE_ADMIN == $userAuth->UserRole->getId()) {
                        return true;
                    }
                }

                return false;
            }

            return false;
        }

        return false;
    }

    public function hasOwnMenu()
    {
        return $this->own_menu;
    }

    public function preDelete($event)
    {
        $privatePath = $this->getPrivateRelativePath(false);
        $publicPath = $this->getPublicRelativePath(false);

        $engineFile = new Engine_File();

        if (file_exists($privatePath)) {
            $engineFile->rmdir_recurse($privatePath);
        }

        if (file_exists($publicPath)) {
            $engineFile->rmdir_recurse($publicPath);
        }
    }

    protected function getSettingsPath()
    {
        return $this->getPrivateRelativePath() . DS . 'settings';
    }
}
